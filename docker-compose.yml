services:

  db:
    image: postgres:17-alpine
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - attendance-control-db:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}

  backend:
    build:
      context: .
      args:
        PROJECT_NAME: ${PROJECT_NAME?Variable not set}
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
        restart: true
    ports:
      - "8000:8000"

    develop:
      # Create a `watch` configuration to update the app
      # https://docs.docker.com/compose/file-watch
      watch:
        # Sync the working directory with the `/app` directory in the container
        - action: sync
          path: .
          target: /${PROJECT_NAME?Variable not set}
          ignore:
            - .venv/

        # Rebuild the image if dependencies change by checking uv.lock
        - action: rebuild
          path: ./uv.lock

volumes:
  attendance-control-db:
